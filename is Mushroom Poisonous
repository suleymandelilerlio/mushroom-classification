{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "603932f4",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-07T14:24:24.277627Z",
     "iopub.status.busy": "2025-10-07T14:24:24.277315Z",
     "iopub.status.idle": "2025-10-07T14:24:26.246707Z",
     "shell.execute_reply": "2025-10-07T14:24:26.245508Z"
    },
    "papermill": {
     "duration": 1.976176,
     "end_time": "2025-10-07T14:24:26.248338",
     "exception": false,
     "start_time": "2025-10-07T14:24:24.272162",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/mushroom-classification/mushrooms.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a22ec9c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-07T14:24:26.256683Z",
     "iopub.status.busy": "2025-10-07T14:24:26.256211Z",
     "iopub.status.idle": "2025-10-07T14:24:46.020667Z",
     "shell.execute_reply": "2025-10-07T14:24:46.019622Z"
    },
    "papermill": {
     "duration": 19.770373,
     "end_time": "2025-10-07T14:24:46.022379",
     "exception": false,
     "start_time": "2025-10-07T14:24:26.252006",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-07 14:24:28.499253: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1759847068.763230      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1759847068.840010      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "da413423",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-07T14:24:46.030561Z",
     "iopub.status.busy": "2025-10-07T14:24:46.029995Z",
     "iopub.status.idle": "2025-10-07T14:24:46.068652Z",
     "shell.execute_reply": "2025-10-07T14:24:46.067593Z"
    },
    "papermill": {
     "duration": 0.04435,
     "end_time": "2025-10-07T14:24:46.070205",
     "exception": false,
     "start_time": "2025-10-07T14:24:46.025855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"/kaggle/input/mushroom-classification/mushrooms.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c0f5556d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-07T14:24:46.077971Z",
     "iopub.status.busy": "2025-10-07T14:24:46.077644Z",
     "iopub.status.idle": "2025-10-07T14:24:46.109738Z",
     "shell.execute_reply": "2025-10-07T14:24:46.108722Z"
    },
    "papermill": {
     "duration": 0.037801,
     "end_time": "2025-10-07T14:24:46.111344",
     "exception": false,
     "start_time": "2025-10-07T14:24:46.073543",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>class</th>\n",
       "      <th>cap-shape</th>\n",
       "      <th>cap-surface</th>\n",
       "      <th>cap-color</th>\n",
       "      <th>bruises</th>\n",
       "      <th>odor</th>\n",
       "      <th>gill-attachment</th>\n",
       "      <th>gill-spacing</th>\n",
       "      <th>gill-size</th>\n",
       "      <th>gill-color</th>\n",
       "      <th>...</th>\n",
       "      <th>stalk-surface-below-ring</th>\n",
       "      <th>stalk-color-above-ring</th>\n",
       "      <th>stalk-color-below-ring</th>\n",
       "      <th>veil-type</th>\n",
       "      <th>veil-color</th>\n",
       "      <th>ring-number</th>\n",
       "      <th>ring-type</th>\n",
       "      <th>spore-print-color</th>\n",
       "      <th>population</th>\n",
       "      <th>habitat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>p</td>\n",
       "      <td>x</td>\n",
       "      <td>s</td>\n",
       "      <td>n</td>\n",
       "      <td>t</td>\n",
       "      <td>p</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>n</td>\n",
       "      <td>k</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>k</td>\n",
       "      <td>s</td>\n",
       "      <td>u</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>e</td>\n",
       "      <td>x</td>\n",
       "      <td>s</td>\n",
       "      <td>y</td>\n",
       "      <td>t</td>\n",
       "      <td>a</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>b</td>\n",
       "      <td>k</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>n</td>\n",
       "      <td>n</td>\n",
       "      <td>g</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>e</td>\n",
       "      <td>b</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>t</td>\n",
       "      <td>l</td>\n",
       "      <td>f</td>\n",
       "      <td>c</td>\n",
       "      <td>b</td>\n",
       "      <td>n</td>\n",
       "      <td>...</td>\n",
       "      <td>s</td>\n",
       "      <td>w</td>\n",
       "      <td>w</td>\n",
       "      <td>p</td>\n",
       "      <td>w</td>\n",
       "      <td>o</td>\n",
       "      <td>p</td>\n",
       "      <td>n</td>\n",
       "      <td>n</td>\n",
       "      <td>m</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  class cap-shape cap-surface cap-color bruises odor gill-attachment  \\\n",
       "0     p         x           s         n       t    p               f   \n",
       "1     e         x           s         y       t    a               f   \n",
       "2     e         b           s         w       t    l               f   \n",
       "\n",
       "  gill-spacing gill-size gill-color  ... stalk-surface-below-ring  \\\n",
       "0            c         n          k  ...                        s   \n",
       "1            c         b          k  ...                        s   \n",
       "2            c         b          n  ...                        s   \n",
       "\n",
       "  stalk-color-above-ring stalk-color-below-ring veil-type veil-color  \\\n",
       "0                      w                      w         p          w   \n",
       "1                      w                      w         p          w   \n",
       "2                      w                      w         p          w   \n",
       "\n",
       "  ring-number ring-type spore-print-color population habitat  \n",
       "0           o         p                 k          s       u  \n",
       "1           o         p                 n          n       g  \n",
       "2           o         p                 n          n       m  \n",
       "\n",
       "[3 rows x 23 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f89a84ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-07T14:24:46.119465Z",
     "iopub.status.busy": "2025-10-07T14:24:46.119189Z",
     "iopub.status.idle": "2025-10-07T14:24:46.132264Z",
     "shell.execute_reply": "2025-10-07T14:24:46.131409Z"
    },
    "papermill": {
     "duration": 0.018802,
     "end_time": "2025-10-07T14:24:46.133824",
     "exception": false,
     "start_time": "2025-10-07T14:24:46.115022",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "class\n",
       "e    4208\n",
       "p    3916\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"class\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a622d2d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-07T14:24:46.142035Z",
     "iopub.status.busy": "2025-10-07T14:24:46.141735Z",
     "iopub.status.idle": "2025-10-07T14:24:46.192568Z",
     "shell.execute_reply": "2025-10-07T14:24:46.191494Z"
    },
    "papermill": {
     "duration": 0.057126,
     "end_time": "2025-10-07T14:24:46.194473",
     "exception": false,
     "start_time": "2025-10-07T14:24:46.137347",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y=df[\"class\"].map({\"e\":0,\"p\":1})\n",
    "y=y.astype(\"float32\")\n",
    "x=df.drop(\"class\",axis=1)\n",
    "x_encoded = x.apply(LabelEncoder().fit_transform).astype('float32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7c3a2def",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-07T14:24:46.203500Z",
     "iopub.status.busy": "2025-10-07T14:24:46.203203Z",
     "iopub.status.idle": "2025-10-07T14:24:51.408984Z",
     "shell.execute_reply": "2025-10-07T14:24:51.407823Z"
    },
    "papermill": {
     "duration": 5.21248,
     "end_time": "2025-10-07T14:24:51.411063",
     "exception": false,
     "start_time": "2025-10-07T14:24:46.198583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n",
      "2025-10-07 14:24:46.215909: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/8\n",
      "\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 18ms/step - accuracy: 0.5440 - loss: 0.7001 - val_accuracy: 0.9440 - val_loss: 0.2576\n",
      "Epoch 2/8\n",
      "\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.7919 - loss: 0.4586 - val_accuracy: 0.8658 - val_loss: 0.3194\n",
      "Epoch 3/8\n",
      "\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.8975 - loss: 0.2463 - val_accuracy: 0.7600 - val_loss: 0.6933\n",
      "Epoch 4/8\n",
      "\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9546 - loss: 0.1234 - val_accuracy: 0.7803 - val_loss: 0.7567\n",
      "Epoch 5/8\n",
      "\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9781 - loss: 0.0690 - val_accuracy: 0.8092 - val_loss: 0.7364\n",
      "Epoch 6/8\n",
      "\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9842 - loss: 0.0494 - val_accuracy: 0.7963 - val_loss: 0.8173\n",
      "Epoch 7/8\n",
      "\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9889 - loss: 0.0369 - val_accuracy: 0.7889 - val_loss: 0.8840\n",
      "Epoch 8/8\n",
      "\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9928 - loss: 0.0254 - val_accuracy: 0.8068 - val_loss: 0.7889\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x7abbf0969a50>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=Sequential()\n",
    "\n",
    "#input layer\n",
    "model.add(Dense(32,input_dim=22,activation=\"relu\"))\n",
    "#hidden layer\n",
    "model.add(Dense(32,activation=\"relu\"))\n",
    "model.add(Dense(64,activation=\"relu\"))\n",
    "model.add(Dense(64,activation=\"relu\"))\n",
    "model.add(Dense(32,activation=\"relu\"))\n",
    "#output layer\n",
    "model.add(Dense(1,activation=\"sigmoid\"))\n",
    "\n",
    "model.compile(loss=\"binary_crossentropy\",optimizer=\"adam\",metrics=[\"accuracy\"])\n",
    "model.fit(x=x_encoded,y=y,epochs=8,batch_size=256,validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8353e3fc",
   "metadata": {
    "papermill": {
     "duration": 0.005041,
     "end_time": "2025-10-07T14:24:51.422412",
     "exception": false,
     "start_time": "2025-10-07T14:24:51.417371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38d810f1",
   "metadata": {
    "papermill": {
     "duration": 0.004862,
     "end_time": "2025-10-07T14:24:51.432823",
     "exception": false,
     "start_time": "2025-10-07T14:24:51.427961",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9894c534",
   "metadata": {
    "papermill": {
     "duration": 0.004917,
     "end_time": "2025-10-07T14:24:51.442907",
     "exception": false,
     "start_time": "2025-10-07T14:24:51.437990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b188eb96",
   "metadata": {
    "papermill": {
     "duration": 0.007471,
     "end_time": "2025-10-07T14:24:51.455905",
     "exception": false,
     "start_time": "2025-10-07T14:24:51.448434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d9add59c",
   "metadata": {
    "papermill": {
     "duration": 0.005901,
     "end_time": "2025-10-07T14:24:51.469329",
     "exception": false,
     "start_time": "2025-10-07T14:24:51.463428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5cf669c8",
   "metadata": {
    "papermill": {
     "duration": 0.010006,
     "end_time": "2025-10-07T14:24:51.489601",
     "exception": false,
     "start_time": "2025-10-07T14:24:51.479595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22dddd42",
   "metadata": {
    "papermill": {
     "duration": 0.005,
     "end_time": "2025-10-07T14:24:51.499909",
     "exception": false,
     "start_time": "2025-10-07T14:24:51.494909",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7ee55ec",
   "metadata": {
    "papermill": {
     "duration": 0.006341,
     "end_time": "2025-10-07T14:24:51.511247",
     "exception": false,
     "start_time": "2025-10-07T14:24:51.504906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c89d94f2",
   "metadata": {
    "papermill": {
     "duration": 0.004749,
     "end_time": "2025-10-07T14:24:51.521506",
     "exception": false,
     "start_time": "2025-10-07T14:24:51.516757",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b032e28",
   "metadata": {
    "papermill": {
     "duration": 0.004927,
     "end_time": "2025-10-07T14:24:51.531605",
     "exception": false,
     "start_time": "2025-10-07T14:24:51.526678",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 478,
     "sourceId": 974,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31153,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 35.353428,
   "end_time": "2025-10-07T14:24:54.659096",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-07T14:24:19.305668",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
